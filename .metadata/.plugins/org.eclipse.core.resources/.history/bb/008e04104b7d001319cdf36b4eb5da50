package com.example.activityregistrator;

public class LinearAccelerationService extends Service implements SensorEventListener {
    private static SensorManager mySensorManager;
    BroadcastReceiver mReceiver;
    Context context;
    List mySensors;
  
    @Override
    public void onCreate() {
         
          mySensorManager = (SensorManager)getSystemService(Context.SENSOR_SERVICE);
          mySensors = mySensorManager.getSensorList(Sensor.TYPE_ORIENTATION);

          if(mySensors.size() &gt; 0){
                 mySensorManager.registerListener(this, mySensors.get(0), SensorManager.SENSOR_DELAY_NORMAL);
          }
          context = YonService.this.getApplicationContext();

          IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
          filter.addAction(Intent.ACTION_SCREEN_OFF);
          mReceiver = new ScreenReceiver();
          registerReceiver(mReceiver, filter);
          super.onCreate();
    }    

    @Override
    public void onDestroy() {
//Unregisters sensorEventListenerImpl. This will stop notifications for all sensors
          mySensorManager.unregisterListener(this);
          unregisterReceiver(mReceiver);
          super.onDestroy();
    }

   public void onAccuracyChanged(Sensor arg0, int arg1) {
         // TODO Auto-generated method stub
   }

   public void onSensorChanged(SensorEvent event) {
         float azimuth = Math.round((float)event.values[0]);
         float pitch = Math.round((float)event.values[1]);
         float roll = Math.round((float)event.values[2]);
        
         Log.e("Values", azimuth +" "+pitch+" "+roll)
//Do anything you want with values     
   }

   @Override
   public IBinder onBind(Intent arg0) {
         // TODO Auto-generated method stub
         return null;
   }

public class ScreenReceiver extends BroadcastReceiver {

          @Override
          public void onReceive(Context context, Intent intent) {
                 if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
//Unregister and register listener after screen goes off.
                       refreshListener ();
                   }             
          }
    }

    public void refreshListener(){
          mySensorManager.unregisterListener(this);
          mySensorManager.registerListener(this, mySensors.get(0), SensorManager.SENSOR_DELAY_NORMAL);
    }
} 